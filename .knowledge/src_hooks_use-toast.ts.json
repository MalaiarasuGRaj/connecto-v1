{"is_source_file": true, "format": "TypeScript", "description": "This file defines a custom hook 'useToast' for managing toast notifications, including actions such as adding, updating, dismissing, and removing toasts. It also provides a 'toast' function to trigger toasts programmatically. The implementation manages internal state and side effects related to toast lifecycle.", "external_files": ["@/components/ui/toast"], "external_methods": ["React.useState", "React.useEffect"], "published": ["useToast", "toast"], "classes": [], "methods": [{"name": "function genId() { genId", "description": "Generates a unique string ID for each toast.", "scope": "", "scopeKind": ""}, {"name": "reducer", "description": "Reduces the current state and an action into a new state, handling toast actions."}, {"name": "function toast({ ...props }: Toast) { toast", "description": "Creates and dispatches a new toast, providing methods to update or dismiss it.", "scope": "", "scopeKind": ""}, {"name": "function useToast() { useToast", "description": "Custom React hook that provides toast state and actions to components.", "scope": "", "scopeKind": ""}, {"name": "function dispatch(action: Action) { dispatch", "description": "Dispatches actions to update toast state and trigger side effects like removing toasts after delay.", "scope": "", "scopeKind": ""}], "calls": ["React.useState", "React.useEffect", "dispatch", "setState", "toast", "reducer", "addToRemoveQueue"], "search-terms": ["use-toast", "toast notification hook", "toast management", "toast actions", "toast lifecycle", "React toast"], "state": 2, "file_id": 43, "knowledge_revision": 102, "git_revision": "ef5f6bcabc9a017a87ee20c118c10b9528ef5011", "ctags": [{"_type": "tag", "name": "Action", "path": "/home/kavia/workspace/code-generation/connecto-v1/src/hooks/use-toast.ts", "pattern": "/^type Action =$/", "language": "TypeScript", "kind": "alias"}, {"_type": "tag", "name": "ActionType", "path": "/home/kavia/workspace/code-generation/connecto-v1/src/hooks/use-toast.ts", "pattern": "/^type ActionType = typeof actionTypes$/", "language": "TypeScript", "kind": "alias"}, {"_type": "tag", "name": "State", "path": "/home/kavia/workspace/code-generation/connecto-v1/src/hooks/use-toast.ts", "pattern": "/^interface State {$/", "language": "TypeScript", "kind": "interface"}, {"_type": "tag", "name": "TOAST_LIMIT", "path": "/home/kavia/workspace/code-generation/connecto-v1/src/hooks/use-toast.ts", "pattern": "/^const TOAST_LIMIT = 1$/", "language": "TypeScript", "kind": "constant"}, {"_type": "tag", "name": "TOAST_REMOVE_DELAY", "path": "/home/kavia/workspace/code-generation/connecto-v1/src/hooks/use-toast.ts", "pattern": "/^const TOAST_REMOVE_DELAY = 1000000$/", "language": "TypeScript", "kind": "constant"}, {"_type": "tag", "name": "Toast", "path": "/home/kavia/workspace/code-generation/connecto-v1/src/hooks/use-toast.ts", "pattern": "/^type Toast = Omit<ToasterToast, \"id\">$/", "language": "TypeScript", "kind": "alias"}, {"_type": "tag", "name": "ToasterToast", "path": "/home/kavia/workspace/code-generation/connecto-v1/src/hooks/use-toast.ts", "pattern": "/^type ToasterToast = ToastProps & {$/", "language": "TypeScript", "kind": "alias"}, {"_type": "tag", "name": "actionTypes", "path": "/home/kavia/workspace/code-generation/connecto-v1/src/hooks/use-toast.ts", "pattern": "/^const actionTypes = {$/", "language": "TypeScript", "kind": "constant"}, {"_type": "tag", "name": "addToRemoveQueue", "path": "/home/kavia/workspace/code-generation/connecto-v1/src/hooks/use-toast.ts", "pattern": "/^const addToRemoveQueue = (toastId: string) => {$/", "language": "TypeScript", "kind": "constant"}, {"_type": "tag", "name": "count", "path": "/home/kavia/workspace/code-generation/connecto-v1/src/hooks/use-toast.ts", "pattern": "/^let count = 0$/", "language": "TypeScript", "kind": "variable"}, {"_type": "tag", "name": "dismiss", "path": "/home/kavia/workspace/code-generation/connecto-v1/src/hooks/use-toast.ts", "pattern": "/^  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })$/", "language": "TypeScript", "kind": "constant", "scope": "toast", "scopeKind": "function"}, {"_type": "tag", "name": "dispatch", "path": "/home/kavia/workspace/code-generation/connecto-v1/src/hooks/use-toast.ts", "pattern": "/^function dispatch(action: Action) {$/", "language": "TypeScript", "kind": "function"}, {"_type": "tag", "name": "genId", "path": "/home/kavia/workspace/code-generation/connecto-v1/src/hooks/use-toast.ts", "pattern": "/^function genId() {$/", "language": "TypeScript", "kind": "function"}, {"_type": "tag", "name": "id", "path": "/home/kavia/workspace/code-generation/connecto-v1/src/hooks/use-toast.ts", "pattern": "/^  const id = genId()$/", "language": "TypeScript", "kind": "constant", "scope": "toast", "scopeKind": "function"}, {"_type": "tag", "name": "index", "path": "/home/kavia/workspace/code-generation/connecto-v1/src/hooks/use-toast.ts", "pattern": "/^      const index = listeners.indexOf(setState)$/", "language": "TypeScript", "kind": "constant", "scope": "useToast", "scopeKind": "function"}, {"_type": "tag", "name": "listeners", "path": "/home/kavia/workspace/code-generation/connecto-v1/src/hooks/use-toast.ts", "pattern": "/^const listeners: Array<(state: State) => void> = []$/", "language": "TypeScript", "kind": "constant"}, {"_type": "tag", "name": "memoryState", "path": "/home/kavia/workspace/code-generation/connecto-v1/src/hooks/use-toast.ts", "pattern": "/^let memoryState: State = { toasts: [] }$/", "language": "TypeScript", "kind": "variable"}, {"_type": "tag", "name": "reducer", "path": "/home/kavia/workspace/code-generation/connecto-v1/src/hooks/use-toast.ts", "pattern": "/^export const reducer = (state: State, action: Action): State => {$/", "language": "TypeScript", "kind": "constant"}, {"_type": "tag", "name": "setState", "path": "/home/kavia/workspace/code-generation/connecto-v1/src/hooks/use-toast.ts", "pattern": "/^  const [state, setState] = React.useState<State>(memoryState)$/", "language": "TypeScript", "kind": "constant", "scope": "useToast", "scopeKind": "function"}, {"_type": "tag", "name": "state", "path": "/home/kavia/workspace/code-generation/connecto-v1/src/hooks/use-toast.ts", "pattern": "/^  const [state, setState] = React.useState<State>(memoryState)$/", "language": "TypeScript", "kind": "constant", "scope": "useToast", "scopeKind": "function"}, {"_type": "tag", "name": "toast", "path": "/home/kavia/workspace/code-generation/connecto-v1/src/hooks/use-toast.ts", "pattern": "/^function toast({ ...props }: Toast) {$/", "language": "TypeScript", "kind": "function"}, {"_type": "tag", "name": "toastTimeouts", "path": "/home/kavia/workspace/code-generation/connecto-v1/src/hooks/use-toast.ts", "pattern": "/^const toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()$/", "language": "TypeScript", "kind": "constant"}, {"_type": "tag", "name": "toasts", "path": "/home/kavia/workspace/code-generation/connecto-v1/src/hooks/use-toast.ts", "pattern": "/^  toasts: ToasterToast[]$/", "language": "TypeScript", "kind": "property", "scope": "State", "scopeKind": "interface"}, {"_type": "tag", "name": "update", "path": "/home/kavia/workspace/code-generation/connecto-v1/src/hooks/use-toast.ts", "pattern": "/^  const update = (props: ToasterToast) =>$/", "language": "TypeScript", "kind": "constant", "scope": "toast", "scopeKind": "function"}, {"_type": "tag", "name": "useToast", "path": "/home/kavia/workspace/code-generation/connecto-v1/src/hooks/use-toast.ts", "pattern": "/^function useToast() {$/", "language": "TypeScript", "kind": "function"}, {"_type": "tag", "name": "void", "path": "/home/kavia/workspace/code-generation/connecto-v1/src/hooks/use-toast.ts", "pattern": "/^const listeners: Array<(state: State) => void> = []$/", "language": "TypeScript", "kind": "constant"}], "hash": "8be7876e08c12ac4eea618920cd25285", "format-version": 4, "code-base-name": "connecto-v1", "filename": "src/hooks/use-toast.ts", "fields": [{"name": "interface State {", "scope": "", "scopeKind": "", "description": "unavailable"}, {"name": "let count = 0", "scope": "", "scopeKind": "", "description": "unavailable"}, {"name": "let memoryState: State = { toasts: [] }", "scope": "", "scopeKind": "", "description": "unavailable"}, {"name": "toasts: ToasterToast[]", "scope": "State", "scopeKind": "interface", "description": "unavailable"}], "revision_history": [{"102": "ef5f6bcabc9a017a87ee20c118c10b9528ef5011"}]}