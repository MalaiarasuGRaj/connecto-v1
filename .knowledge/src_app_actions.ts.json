{"is_source_file": true, "format": "TypeScript", "description": "This file contains server-side functions for handling chat interactions, including environment validation, directory reading, file retrieval, and API call management for a chat-based application that answers questions about company data stored in text files. It also defines schema validations and orchestrates the flow of routing user messages to relevant document snippets or general responses.", "external_files": ["zod", "fs", "path"], "external_methods": ["fs.promises.readdir", "fs.promises.readFile", "path.join", "path.extname", "path.dirname", "fetch"], "published": ["getResponse", "generateChatResponse"], "classes": [], "methods": [{"name": "function assertServerEnv() { assertServerEnv", "description": "Validates that necessary server environment variables for API keys are present.", "scope": "", "scopeKind": ""}, {"name": "async function getCompanyFilenames(): Promise<string[]> { getCompanyFilenames", "description": "Asynchronously retrieves a list of .txt filenames from the 'data' directory within the current working directory.", "scope": "", "scopeKind": ""}, {"name": "async function getCompanyData(filename: string): Promise<string> { getCompanyData", "description": "Reads and returns the content of a specified company data text file from the 'data' directory.", "scope": "", "scopeKind": ""}, {"name": "async function callOpenRouter(systemPrompt: string, userMessage: string, history: {role: string,/ callOpenRouter", "description": "Sends a chat request to the OpenRouter API with a specified system prompt, user message, and conversation history, and returns the assistant's reply.", "scope": "", "scopeKind": ""}, {"name": "export async function getResponse(input: { message: string, history: any[] }) { getResponse", "description": "Main orchestration function that processes user input, identifies relevant company files, retrieves data, and generates appropriate responses based on context or general conversation.", "scope": "", "scopeKind": ""}, {"name": "export async function generateChatResponse(input: { generateChatResponse", "description": "Wrapper function to handle chat responses, normalizing roles and delegating to getResponse, used in server-side API endpoints.", "scope": "", "scopeKind": ""}], "calls": ["fs.promises.readdir", "fs.promises.readFile", "path.join", "path.extname", "path.dirname", "fetch"], "search-terms": ["getCompanyFilenames", "getCompanyData", "callOpenRouter", "assertServerEnv", "getResponse", "generateChatResponse", "environment validation", "file retrieval", "openrouter API"], "state": 2, "file_id": 41, "knowledge_revision": 122, "git_revision": "edf1371341470e48b22d6de525292a7208cf69d9", "revision_history": [{"101": "205c715cf568c9bc2ad27e3099767a265ac7db49"}, {"120": "edf1371341470e48b22d6de525292a7208cf69d9"}, {"122": "edf1371341470e48b22d6de525292a7208cf69d9"}], "ctags": [{"_type": "tag", "name": "MessageSchema", "path": "/home/kavia/workspace/code-generation/connecto-v1/src/app/actions.ts", "pattern": "/^const MessageSchema = z.object({$/", "language": "TypeScript", "kind": "constant"}, {"_type": "tag", "name": "RequestSchema", "path": "/home/kavia/workspace/code-generation/connecto-v1/src/app/actions.ts", "pattern": "/^const RequestSchema = z.object({$/", "language": "TypeScript", "kind": "constant"}, {"_type": "tag", "name": "answerGenerationPrompt", "path": "/home/kavia/workspace/code-generation/connecto-v1/src/app/actions.ts", "pattern": "/^        const answerGenerationPrompt = `You are a helpful AI assistant. Your primary goal is to /", "language": "TypeScript", "kind": "constant", "scope": "getResponse", "scopeKind": "function"}, {"_type": "tag", "name": "assertServerEnv", "path": "/home/kavia/workspace/code-generation/connecto-v1/src/app/actions.ts", "pattern": "/^function assertServerEnv() {$/", "language": "TypeScript", "kind": "function"}, {"_type": "tag", "name": "callOpenRouter", "path": "/home/kavia/workspace/code-generation/connecto-v1/src/app/actions.ts", "pattern": "/^async function callOpenRouter(systemPrompt: string, userMessage: string, history: {role: string,/", "language": "TypeScript", "kind": "function"}, {"_type": "tag", "name": "companyKnowledge", "path": "/home/kavia/workspace/code-generation/connecto-v1/src/app/actions.ts", "pattern": "/^        const companyKnowledge = await getCompanyData(relevantFilename);$/", "language": "TypeScript", "kind": "constant", "scope": "getResponse", "scopeKind": "function"}, {"_type": "tag", "name": "dataDir", "path": "/home/kavia/workspace/code-generation/connecto-v1/src/app/actions.ts", "pattern": "/^  const dataDir = path.join(process.cwd(), 'data');$/", "language": "TypeScript", "kind": "constant", "scope": "getCompanyData", "scopeKind": "function"}, {"_type": "tag", "name": "dataDir", "path": "/home/kavia/workspace/code-generation/connecto-v1/src/app/actions.ts", "pattern": "/^  const dataDir = path.join(process.cwd(), 'data');$/", "language": "TypeScript", "kind": "constant", "scope": "getCompanyFilenames", "scopeKind": "function"}, {"_type": "tag", "name": "errorBody", "path": "/home/kavia/workspace/code-generation/connecto-v1/src/app/actions.ts", "pattern": "/^        const errorBody = await response.text();$/", "language": "TypeScript", "kind": "constant", "scope": "callOpenRouter", "scopeKind": "function"}, {"_type": "tag", "name": "filePath", "path": "/home/kavia/workspace/code-generation/connecto-v1/src/app/actions.ts", "pattern": "/^  const filePath = path.join(dataDir, filename);$/", "language": "TypeScript", "kind": "constant", "scope": "getCompanyData", "scopeKind": "function"}, {"_type": "tag", "name": "fileSelectionPrompt", "path": "/home/kavia/workspace/code-generation/connecto-v1/src/app/actions.ts", "pattern": "/^    const fileSelectionPrompt = `You are an expert at routing user questions to the correct docu/", "language": "TypeScript", "kind": "constant", "scope": "getResponse", "scopeKind": "function"}, {"_type": "tag", "name": "filenames", "path": "/home/kavia/workspace/code-generation/connecto-v1/src/app/actions.ts", "pattern": "/^    const filenames = await getCompanyFilenames();$/", "language": "TypeScript", "kind": "constant", "scope": "getResponse", "scopeKind": "function"}, {"_type": "tag", "name": "files", "path": "/home/kavia/workspace/code-generation/connecto-v1/src/app/actions.ts", "pattern": "/^    const files = await fs.promises.readdir(dataDir);$/", "language": "TypeScript", "kind": "constant", "scope": "getCompanyFilenames", "scopeKind": "function"}, {"_type": "tag", "name": "generalPrompt", "path": "/home/kavia/workspace/code-generation/connecto-v1/src/app/actions.ts", "pattern": "/^    const generalPrompt = `You are a helpful and friendly career assistant chatbot for students./", "language": "TypeScript", "kind": "constant", "scope": "getResponse", "scopeKind": "function"}, {"_type": "tag", "name": "generateChatResponse", "path": "/home/kavia/workspace/code-generation/connecto-v1/src/app/actions.ts", "pattern": "/^export async function generateChatResponse(input: {$/", "language": "TypeScript", "kind": "function"}, {"_type": "tag", "name": "getCompanyData", "path": "/home/kavia/workspace/code-generation/connecto-v1/src/app/actions.ts", "pattern": "/^async function getCompanyData(filename: string): Promise<string> {$/", "language": "TypeScript", "kind": "function"}, {"_type": "tag", "name": "getCompanyFilenames", "path": "/home/kavia/workspace/code-generation/connecto-v1/src/app/actions.ts", "pattern": "/^async function getCompanyFilenames(): Promise<string[]> {$/", "language": "TypeScript", "kind": "function"}, {"_type": "tag", "name": "getResponse", "path": "/home/kavia/workspace/code-generation/connecto-v1/src/app/actions.ts", "pattern": "/^export async function getResponse(input: { message: string, history: any[] }) {$/", "language": "TypeScript", "kind": "function"}, {"_type": "tag", "name": "history", "path": "/home/kavia/workspace/code-generation/connecto-v1/src/app/actions.ts", "pattern": "/^  const history = (input.history ?? []).map(h => ({$/", "language": "TypeScript", "kind": "constant", "scope": "generateChatResponse", "scopeKind": "function"}, {"_type": "tag", "name": "history", "path": "/home/kavia/workspace/code-generation/connecto-v1/src/app/actions.ts", "pattern": "/^  const { message: userMessage, history } = validatedInput.data;$/", "language": "TypeScript", "kind": "constant", "scope": "getResponse", "scopeKind": "function"}, {"_type": "tag", "name": "jsonResponse", "path": "/home/kavia/workspace/code-generation/connecto-v1/src/app/actions.ts", "pattern": "/^    const jsonResponse = await response.json();$/", "language": "TypeScript", "kind": "constant", "scope": "callOpenRouter", "scopeKind": "function"}, {"_type": "tag", "name": "mappedHistory", "path": "/home/kavia/workspace/code-generation/connecto-v1/src/app/actions.ts", "pattern": "/^    const mappedHistory = history.map(h => ({$/", "language": "TypeScript", "kind": "constant", "scope": "callOpenRouter", "scopeKind": "function"}, {"_type": "tag", "name": "message", "path": "/home/kavia/workspace/code-generation/connecto-v1/src/app/actions.ts", "pattern": "/^  const { message: userMessage, history } = validatedInput.data;$/", "language": "TypeScript", "kind": "constant", "scope": "getResponse", "scopeKind": "function"}, {"_type": "tag", "name": "response", "path": "/home/kavia/workspace/code-generation/connecto-v1/src/app/actions.ts", "pattern": "/^    const response = await fetch(\"https:\\/\\/openrouter.ai\\/api\\/v1\\/chat\\/completions\", {$/", "language": "TypeScript", "kind": "constant", "scope": "callOpenRouter", "scopeKind": "function"}, {"_type": "tag", "name": "validatedInput", "path": "/home/kavia/workspace/code-generation/connecto-v1/src/app/actions.ts", "pattern": "/^  const validatedInput = RequestSchema.safeParse(input);$/", "language": "TypeScript", "kind": "constant", "scope": "getResponse", "scopeKind": "function"}], "hash": "ed54d474f616eecbc46fc5d0724f50e6", "format-version": 4, "code-base-name": "connecto-v1", "filename": "src/app/actions.ts"}