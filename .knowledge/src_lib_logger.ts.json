{"is_source_file": true, "format": "TypeScript", "description": "This file contains a structured logger implementation for a server-side environment, including functions for generating request IDs, redacting secrets from logs, and wrapping API handlers with standardized logging and error handling.", "external_files": ["crypto", "process.env"], "external_methods": ["crypto.getRandomValues"], "published": ["logger", "withApiLogging", "withFlowLogging", "getRequestId", "safeJson"], "classes": [{"name": "BaseLogger", "description": "Implements the ILogger interface to provide structured JSON logging with support for child loggers and log levels."}], "methods": [{"name": "function nanoId(size = 16): string { nanoId", "description": "Generates a small, URL-friendly unique ID with optional size parameter.", "scope": "", "scopeKind": ""}, {"name": "function collectSecrets(): string[] { collectSecrets", "description": "Collects secret environment variable values to be redacted from logs.", "scope": "", "scopeKind": ""}, {"name": "function redactString(input: string): string { redactString", "description": "Replaces known secret strings in input with '[REDACTED]'.", "scope": "", "scopeKind": ""}, {"name": "function sanitize(value: any, seen = new WeakSet()): any { sanitize", "description": "Recursively sanitizes objects for logging by removing functions, symbols, and redacting secrets.", "scope": "", "scopeKind": ""}, {"name": "function jsonLog(level: LogLevel, base: LogFields, obj?: LogFields | null, msg?: string) { jsonLog", "description": "Logs structured data in JSON format at specified log level.", "scope": "", "scopeKind": ""}, {"name": "export function getRequestId(headers?: Headers): string { getRequestId", "description": "Extracts or generates a request ID from request headers.", "scope": "", "scopeKind": ""}, {"name": "export function withApiLogging(handler: ApiHandler): ApiHandler { withApiLogging", "description": "Wraps an API request handler to add standardized start, complete, and error logging with request ID management.", "scope": "", "scopeKind": ""}, {"name": "export function withFlowLogging<I, O>( withFlowLogging", "description": "Wraps async flows with logging of start, completion, and error events.", "scope": "", "scopeKind": ""}, {"name": "export async function safeJson<T = any>(req: Request): Promise<[T | null, string | null]> { safeJson", "description": "Safely parses JSON from a Request without throwing exceptions, returning parse result and error message.", "scope": "", "scopeKind": ""}, {"name": "child(bindings: LogFields): ILogger; child", "scope": "ILogger", "scopeKind": "interface", "description": "unavailable"}, {"name": "constructor(private bindings: LogFields = {}) {} constructor", "scope": "BaseLogger", "scopeKind": "class", "description": "unavailable"}, {"name": "debug(obj: LogFields | null, msg?: string): void; debug", "scope": "ILogger", "scopeKind": "interface", "description": "unavailable"}, {"name": "error(obj: LogFields | null, msg?: string): void; error", "scope": "ILogger", "scopeKind": "interface", "description": "unavailable"}, {"name": "info(obj: LogFields | null, msg?: string): void; info", "scope": "ILogger", "scopeKind": "interface", "description": "unavailable"}, {"name": "warn(obj: LogFields | null, msg?: string): void; warn", "scope": "ILogger", "scopeKind": "interface", "description": "unavailable"}], "calls": ["crypto.getRandomValues", "process.env", "JSON.stringify", "console.log"], "search-terms": ["logger", "withApiLogging", "withFlowLogging", "requestId", "structured logging", "secret redaction", "json logger"], "state": 2, "file_id": 64, "knowledge_revision": 141, "git_revision": "", "ctags": [{"_type": "tag", "name": "ApiHandler", "path": "/home/kavia/workspace/code-generation/connecto-v1/src/lib/logger.ts", "pattern": "/^export type ApiHandler = (req: Request, log: ILogger) => Promise<Response> | Response;$/", "language": "TypeScript", "kind": "alias"}, {"_type": "tag", "name": "BaseLogger", "path": "/home/kavia/workspace/code-generation/connecto-v1/src/lib/logger.ts", "pattern": "/^class BaseLogger implements ILogger {$/", "language": "TypeScript", "kind": "class"}, {"_type": "tag", "name": "ILogger", "path": "/home/kavia/workspace/code-generation/connecto-v1/src/lib/logger.ts", "pattern": "/^export interface ILogger {$/", "language": "TypeScript", "kind": "interface"}, {"_type": "tag", "name": "LogFields", "path": "/home/kavia/workspace/code-generation/connecto-v1/src/lib/logger.ts", "pattern": "/^export interface LogFields {$/", "language": "TypeScript", "kind": "interface"}, {"_type": "tag", "name": "LogLevel", "path": "/home/kavia/workspace/code-generation/connecto-v1/src/lib/logger.ts", "pattern": "/^type LogLevel = 'debug' | 'info' | 'warn' | 'error';$/", "language": "TypeScript", "kind": "alias"}, {"_type": "tag", "name": "SECRET_ENV_KEYS", "path": "/home/kavia/workspace/code-generation/connecto-v1/src/lib/logger.ts", "pattern": "/^const SECRET_ENV_KEYS = [$/", "language": "TypeScript", "kind": "constant"}, {"_type": "tag", "name": "alphabet", "path": "/home/kavia/workspace/code-generation/connecto-v1/src/lib/logger.ts", "pattern": "/^  const alphabet = '0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ_abcdefghijklmnopqrstuvwxyz-';$/", "language": "TypeScript", "kind": "constant", "scope": "nanoId", "scopeKind": "function"}, {"_type": "tag", "name": "bindings", "path": "/home/kavia/workspace/code-generation/connecto-v1/src/lib/logger.ts", "pattern": "/^  constructor(private bindings: LogFields = {}) {}$/", "language": "TypeScript", "kind": "property", "scope": "BaseLogger", "scopeKind": "class"}, {"_type": "tag", "name": "body", "path": "/home/kavia/workspace/code-generation/connecto-v1/src/lib/logger.ts", "pattern": "/^      const body = {$/", "language": "TypeScript", "kind": "constant", "scope": "withApiLogging", "scopeKind": "function"}, {"_type": "tag", "name": "bytes", "path": "/home/kavia/workspace/code-generation/connecto-v1/src/lib/logger.ts", "pattern": "/^  const bytes = crypto.getRandomValues(new Uint8Array(size));$/", "language": "TypeScript", "kind": "constant", "scope": "nanoId", "scopeKind": "function"}, {"_type": "tag", "name": "child", "path": "/home/kavia/workspace/code-generation/connecto-v1/src/lib/logger.ts", "pattern": "/^  child(bindings: LogFields): ILogger;$/", "language": "TypeScript", "kind": "method", "scope": "ILogger", "scopeKind": "interface"}, {"_type": "tag", "name": "collectSecrets", "path": "/home/kavia/workspace/code-generation/connecto-v1/src/lib/logger.ts", "pattern": "/^function collectSecrets(): string[] {$/", "language": "TypeScript", "kind": "function"}, {"_type": "tag", "name": "constructor", "path": "/home/kavia/workspace/code-generation/connecto-v1/src/lib/logger.ts", "pattern": "/^  constructor(private bindings: LogFields = {}) {}$/", "language": "TypeScript", "kind": "method", "scope": "BaseLogger", "scopeKind": "class"}, {"_type": "tag", "name": "debug", "path": "/home/kavia/workspace/code-generation/connecto-v1/src/lib/logger.ts", "pattern": "/^  debug(obj: LogFields | null, msg?: string): void;$/", "language": "TypeScript", "kind": "method", "scope": "ILogger", "scopeKind": "interface"}, {"_type": "tag", "name": "error", "path": "/home/kavia/workspace/code-generation/connecto-v1/src/lib/logger.ts", "pattern": "/^        error: {$/", "language": "TypeScript", "kind": "constant", "scope": "withApiLogging", "scopeKind": "function"}, {"_type": "tag", "name": "error", "path": "/home/kavia/workspace/code-generation/connecto-v1/src/lib/logger.ts", "pattern": "/^  error(obj: LogFields | null, msg?: string): void;$/", "language": "TypeScript", "kind": "method", "scope": "ILogger", "scopeKind": "interface"}, {"_type": "tag", "name": "fromHeader", "path": "/home/kavia/workspace/code-generation/connecto-v1/src/lib/logger.ts", "pattern": "/^  const fromHeader =$/", "language": "TypeScript", "kind": "constant", "scope": "getRequestId", "scopeKind": "function"}, {"_type": "tag", "name": "getRequestId", "path": "/home/kavia/workspace/code-generation/connecto-v1/src/lib/logger.ts", "pattern": "/^export function getRequestId(headers?: Headers): string {$/", "language": "TypeScript", "kind": "function"}, {"_type": "tag", "name": "info", "path": "/home/kavia/workspace/code-generation/connecto-v1/src/lib/logger.ts", "pattern": "/^  info(obj: LogFields | null, msg?: string): void;$/", "language": "TypeScript", "kind": "method", "scope": "ILogger", "scopeKind": "interface"}, {"_type": "tag", "name": "jsonLog", "path": "/home/kavia/workspace/code-generation/connecto-v1/src/lib/logger.ts", "pattern": "/^function jsonLog(level: LogLevel, base: LogFields, obj?: LogFields | null, msg?: string) {$/", "language": "TypeScript", "kind": "function"}, {"_type": "tag", "name": "k", "path": "/home/kavia/workspace/code-generation/connecto-v1/src/lib/logger.ts", "pattern": "/^    for (const k of Object.keys(value)) {$/", "language": "TypeScript", "kind": "constant", "scope": "sanitize", "scopeKind": "function"}, {"_type": "tag", "name": "key", "path": "/home/kavia/workspace/code-generation/connecto-v1/src/lib/logger.ts", "pattern": "/^    const val = process.env[key];$/", "language": "TypeScript", "kind": "constant", "scope": "collectSecrets", "scopeKind": "function"}, {"_type": "tag", "name": "key", "path": "/home/kavia/workspace/code-generation/connecto-v1/src/lib/logger.ts", "pattern": "/^  for (const key of SECRET_ENV_KEYS) {$/", "language": "TypeScript", "kind": "constant", "scope": "collectSecrets", "scopeKind": "function"}, {"_type": "tag", "name": "log", "path": "/home/kavia/workspace/code-generation/connecto-v1/src/lib/logger.ts", "pattern": "/^    const log = (parentLog ?? logger).child({ flow: name });$/", "language": "TypeScript", "kind": "constant", "scope": "withFlowLogging", "scopeKind": "function"}, {"_type": "tag", "name": "log", "path": "/home/kavia/workspace/code-generation/connecto-v1/src/lib/logger.ts", "pattern": "/^    const log = logger.child({$/", "language": "TypeScript", "kind": "constant", "scope": "withApiLogging", "scopeKind": "function"}, {"_type": "tag", "name": "logger", "path": "/home/kavia/workspace/code-generation/connecto-v1/src/lib/logger.ts", "pattern": "/^export const logger: ILogger = new BaseLogger({$/", "language": "TypeScript", "kind": "constant"}, {"_type": "tag", "name": "nanoId", "path": "/home/kavia/workspace/code-generation/connecto-v1/src/lib/logger.ts", "pattern": "/^function nanoId(size = 16): string {$/", "language": "TypeScript", "kind": "function"}, {"_type": "tag", "name": "out", "path": "/home/kavia/workspace/code-generation/connecto-v1/src/lib/logger.ts", "pattern": "/^      const out = await fn(input, log);$/", "language": "TypeScript", "kind": "constant", "scope": "withFlowLogging", "scopeKind": "function"}, {"_type": "tag", "name": "out", "path": "/home/kavia/workspace/code-generation/connecto-v1/src/lib/logger.ts", "pattern": "/^    const out: Record<string, any> = {};$/", "language": "TypeScript", "kind": "constant", "scope": "sanitize", "scopeKind": "function"}, {"_type": "tag", "name": "r", "path": "/home/kavia/workspace/code-generation/connecto-v1/src/lib/logger.ts", "pattern": "/^      const r = new Response(res.body, res);$/", "language": "TypeScript", "kind": "constant", "scope": "withApiLogging", "scopeKind": "function"}, {"_type": "tag", "name": "record", "path": "/home/kavia/workspace/code-generation/connecto-v1/src/lib/logger.ts", "pattern": "/^  const record: any = {$/", "language": "TypeScript", "kind": "constant", "scope": "jsonLog", "scopeKind": "function"}, {"_type": "tag", "name": "redactString", "path": "/home/kavia/workspace/code-generation/connecto-v1/src/lib/logger.ts", "pattern": "/^function redactString(input: string): string {$/", "language": "TypeScript", "kind": "function"}, {"_type": "tag", "name": "requestId", "path": "/home/kavia/workspace/code-generation/connecto-v1/src/lib/logger.ts", "pattern": "/^    const requestId = getRequestId(req.headers as any as Headers);$/", "language": "TypeScript", "kind": "constant", "scope": "withApiLogging", "scopeKind": "function"}, {"_type": "tag", "name": "res", "path": "/home/kavia/workspace/code-generation/connecto-v1/src/lib/logger.ts", "pattern": "/^      const res = await handler(req, log);$/", "language": "TypeScript", "kind": "constant", "scope": "withApiLogging", "scopeKind": "function"}, {"_type": "tag", "name": "res", "path": "/home/kavia/workspace/code-generation/connecto-v1/src/lib/logger.ts", "pattern": "/^      const res = new Response(JSON.stringify(body), {$/", "language": "TypeScript", "kind": "constant", "scope": "withApiLogging", "scopeKind": "function"}, {"_type": "tag", "name": "safeJson", "path": "/home/kavia/workspace/code-generation/connecto-v1/src/lib/logger.ts", "pattern": "/^export async function safeJson<T = any>(req: Request): Promise<[T | null, string | null]> {$/", "language": "TypeScript", "kind": "function"}, {"_type": "tag", "name": "sanitize", "path": "/home/kavia/workspace/code-generation/connecto-v1/src/lib/logger.ts", "pattern": "/^function sanitize(value: any, seen = new WeakSet()): any {$/", "language": "TypeScript", "kind": "function"}, {"_type": "tag", "name": "sec", "path": "/home/kavia/workspace/code-generation/connecto-v1/src/lib/logger.ts", "pattern": "/^  for (const sec of secretValues) {$/", "language": "TypeScript", "kind": "constant", "scope": "redactString", "scopeKind": "function"}, {"_type": "tag", "name": "secretValues", "path": "/home/kavia/workspace/code-generation/connecto-v1/src/lib/logger.ts", "pattern": "/^const secretValues = collectSecrets();$/", "language": "TypeScript", "kind": "constant"}, {"_type": "tag", "name": "secrets", "path": "/home/kavia/workspace/code-generation/connecto-v1/src/lib/logger.ts", "pattern": "/^  const secrets: string[] = [];$/", "language": "TypeScript", "kind": "constant", "scope": "collectSecrets", "scopeKind": "function"}, {"_type": "tag", "name": "t", "path": "/home/kavia/workspace/code-generation/connecto-v1/src/lib/logger.ts", "pattern": "/^  const t = typeof value;$/", "language": "TypeScript", "kind": "constant", "scope": "sanitize", "scopeKind": "function"}, {"_type": "tag", "name": "time", "path": "/home/kavia/workspace/code-generation/connecto-v1/src/lib/logger.ts", "pattern": "/^    time: new Date().toISOString(),$/", "language": "TypeScript", "kind": "constant", "scope": "jsonLog", "scopeKind": "function"}, {"_type": "tag", "name": "v", "path": "/home/kavia/workspace/code-generation/connecto-v1/src/lib/logger.ts", "pattern": "/^    const v = (await req.json()) as T;$/", "language": "TypeScript", "kind": "constant", "scope": "safeJson", "scopeKind": "function"}, {"_type": "tag", "name": "val", "path": "/home/kavia/workspace/code-generation/connecto-v1/src/lib/logger.ts", "pattern": "/^    const val = process.env[key];$/", "language": "TypeScript", "kind": "constant", "scope": "collectSecrets", "scopeKind": "function"}, {"_type": "tag", "name": "warn", "path": "/home/kavia/workspace/code-generation/connecto-v1/src/lib/logger.ts", "pattern": "/^  warn(obj: LogFields | null, msg?: string): void;$/", "language": "TypeScript", "kind": "method", "scope": "ILogger", "scopeKind": "interface"}, {"_type": "tag", "name": "withApiLogging", "path": "/home/kavia/workspace/code-generation/connecto-v1/src/lib/logger.ts", "pattern": "/^export function withApiLogging(handler: ApiHandler): ApiHandler {$/", "language": "TypeScript", "kind": "function"}, {"_type": "tag", "name": "withFlowLogging", "path": "/home/kavia/workspace/code-generation/connecto-v1/src/lib/logger.ts", "pattern": "/^export function withFlowLogging<I, O>($/", "language": "TypeScript", "kind": "function"}], "hash": "ada226b7d292eafb26f474684fe6bb3d", "format-version": 4, "code-base-name": "connecto-v1", "filename": "src/lib/logger.ts", "fields": [{"name": "export interface ILogger {", "scope": "", "scopeKind": "", "description": "unavailable"}, {"name": "export interface LogFields {", "scope": "", "scopeKind": "", "description": "unavailable"}, {"name": "constructor(private bindings: LogFields = {}) {}", "scope": "BaseLogger", "scopeKind": "class", "description": "unavailable"}], "revision_history": [{"141": ""}]}