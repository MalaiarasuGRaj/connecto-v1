// This file uses server-side code, and must have the 'use server' directive.
'use server';

/**
 * @fileOverview This file defines a Genkit flow for generating chatbot responses using the Gemini API.
 *
 * - generateGeminiResponse - A function that takes a user message as input and returns a chatbot response.
 * - GenerateGeminiResponseInput - The input type for the generateGeminiResponse function.
 * - GenerateGeminiResponseOutput - The return type for the generateGeminiResponse function.
 */

import {ai} from '@/ai/genkit';
import {z} from 'genkit';

const GenerateGeminiResponseInputSchema = z.object({
  message: z.string().describe('The user message to be processed by the chatbot.'),
});
export type GenerateGeminiResponseInput = z.infer<typeof GenerateGeminiResponseInputSchema>;

const GenerateGeminiResponseOutputSchema = z.object({
  response: z.string().describe('The chatbot response generated by the Gemini API.'),
});
export type GenerateGeminiResponseOutput = z.infer<typeof GenerateGeminiResponseOutputSchema>;

export async function generateGeminiResponse(input: GenerateGeminiResponseInput): Promise<GenerateGeminiResponseOutput> {
  return generateGeminiResponseFlow(input);
}

const generateGeminiResponsePrompt = ai.definePrompt({
  name: 'generateGeminiResponsePrompt',
  input: {schema: GenerateGeminiResponseInputSchema},
  output: {schema: GenerateGeminiResponseOutputSchema},
  prompt: `You are a helpful and informative chatbot. Respond to the following user message with a helpful answer.\n\nUser Message: {{{message}}}`,
});

const generateGeminiResponseFlow = ai.defineFlow(
  {
    name: 'generateGeminiResponseFlow',
    inputSchema: GenerateGeminiResponseInputSchema,
    outputSchema: GenerateGeminiResponseOutputSchema,
  },
  async input => {
    const {output} = await generateGeminiResponsePrompt(input);
    return output!;
  }
);
